<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>luna-sysmgr-common: Utils.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">luna-sysmgr-common
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('Utils_8cpp.htm','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Utils.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="Common_8h_source.htm">Common.h</a>&quot;</code><br/>
<code>#include &lt;stdio.h&gt;</code><br/>
<code>#include &lt;string.h&gt;</code><br/>
<code>#include &lt;stdlib.h&gt;</code><br/>
<code>#include &lt;unistd.h&gt;</code><br/>
<code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;sys/time.h&gt;</code><br/>
<code>#include &lt;sys/wait.h&gt;</code><br/>
<code>#include &lt;sys/types.h&gt;</code><br/>
<code>#include &lt;sys/stat.h&gt;</code><br/>
<code>#include &lt;glib.h&gt;</code><br/>
<code>#include &lt;cjson/json.h&gt;</code><br/>
<code>#include &lt;cjson/json_util.h&gt;</code><br/>
<code>#include &lt;algorithm&gt;</code><br/>
<code>#include &lt;fcntl.h&gt;</code><br/>
<code>#include &lt;QFile&gt;</code><br/>
<code>#include &lt;QByteArray&gt;</code><br/>
<code>#include &lt;QtDebug&gt;</code><br/>
<code>#include &quot;<a class="el" href="Utils_8h_source.htm">Utils.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for Utils.cpp:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="Utils_8cpp__incl.svg" width="1844" height="195"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:a64e8389b0e7b389c7c43a55a92289bd9"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a64e8389b0e7b389c7c43a55a92289bd9">RDBUFFSIZE</a>&#160;&#160;&#160;(1024*32)</td></tr>
<tr class="separator:a64e8389b0e7b389c7c43a55a92289bd9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abedad29eea1a103f6c5d19f92170b7e1"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#abedad29eea1a103f6c5d19f92170b7e1">DUPFD</a>(ofd, nfd)&#160;&#160;&#160;(dup2(ofd, nfd) == 0  &amp;&amp;  close(ofd) == 0)</td></tr>
<tr class="separator:abedad29eea1a103f6c5d19f92170b7e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a8ab18e0440495aee30a8405b8d086a71"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a8ab18e0440495aee30a8405b8d086a71">setPosTopLeft</a> (QGraphicsItem *item, int x, int y)</td></tr>
<tr class="separator:a8ab18e0440495aee30a8405b8d086a71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a204e2f13079dae86310219e4cbbbcf06"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a204e2f13079dae86310219e4cbbbcf06">readFile</a> (const char *filePath)</td></tr>
<tr class="separator:a204e2f13079dae86310219e4cbbbcf06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a375f0b9e36aad193f4e9ee1d59c65660"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a375f0b9e36aad193f4e9ee1d59c65660">writeFile</a> (const std::string &amp;filePath, const std::string &amp;buffer)</td></tr>
<tr class="separator:a375f0b9e36aad193f4e9ee1d59c65660"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac95b4ab7fc2fd22c63687a6bbb338e36"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#ac95b4ab7fc2fd22c63687a6bbb338e36">writeFile</a> (const std::string &amp;filePath, QByteArray buffer)</td></tr>
<tr class="separator:ac95b4ab7fc2fd22c63687a6bbb338e36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee3eaf1c6bb0cec2c83122d013410262"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#aee3eaf1c6bb0cec2c83122d013410262">writeToTempFile</a> (const std::string &amp;data, const std::string &amp;tempDir, std::string &amp;r_outputFile)</td></tr>
<tr class="separator:aee3eaf1c6bb0cec2c83122d013410262"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2dbeeeeb3b63b1cc70aa056d32e1252"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#ae2dbeeeeb3b63b1cc70aa056d32e1252">concatToTempFile</a> (std::vector&lt; std::string &gt; &amp;files, const std::string &amp;tempDir, std::string &amp;r_outputFile)</td></tr>
<tr class="separator:ae2dbeeeeb3b63b1cc70aa056d32e1252"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe2ffea7f45c7592f3bcc529683615fa"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#afe2ffea7f45c7592f3bcc529683615fa">deleteFile</a> (const char *filePath)</td></tr>
<tr class="separator:afe2ffea7f45c7592f3bcc529683615fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c21024afc29d8646335ba5b36bee9da"><td class="memItemLeft" align="right" valign="top">time_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a1c21024afc29d8646335ba5b36bee9da">localTime</a> ()</td></tr>
<tr class="separator:a1c21024afc29d8646335ba5b36bee9da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61f83aebdbdd924d6511d7b100b18a44"><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a61f83aebdbdd924d6511d7b100b18a44">currentTimeMs</a> ()</td></tr>
<tr class="separator:a61f83aebdbdd924d6511d7b100b18a44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79621815108cf7e928bf6f4fcfa8aea7"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a79621815108cf7e928bf6f4fcfa8aea7">getResourceNameFromUrl</a> (const QUrl &amp;url)</td></tr>
<tr class="separator:a79621815108cf7e928bf6f4fcfa8aea7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62066e3517f95a54f4da7b1f2cffb941"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a62066e3517f95a54f4da7b1f2cffb941">trimWhitespace</a> (const std::string &amp;s, const std::string &amp;drop)</td></tr>
<tr class="separator:a62066e3517f95a54f4da7b1f2cffb941"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab07756d17c36c23e8095fa95485f6103"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#ab07756d17c36c23e8095fa95485f6103">getNthSubstring</a> (unsigned int n, std::string &amp;dest, const std::string &amp;str, const std::string &amp;delims)</td></tr>
<tr class="separator:ab07756d17c36c23e8095fa95485f6103"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a004641b53fefa228d1655c96cd431a0e"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a004641b53fefa228d1655c96cd431a0e">splitFileAndPath</a> (const std::string &amp;srcPathAndFile, std::string &amp;pathPart, std::string &amp;filePart)</td></tr>
<tr class="separator:a004641b53fefa228d1655c96cd431a0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a981edd1f2cd488512dfc8734377e3f64"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a981edd1f2cd488512dfc8734377e3f64">splitFileAndExtension</a> (const std::string &amp;srcFileAndExt, std::string &amp;filePart, std::string &amp;extensionPart)</td></tr>
<tr class="separator:a981edd1f2cd488512dfc8734377e3f64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37fb85e001edd300d7658fe2f15de2c5"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a37fb85e001edd300d7658fe2f15de2c5">splitStringOnKey</a> (std::vector&lt; std::string &gt; &amp;returnSplitSubstrings, const std::string &amp;baseStr, const std::string &amp;delims)</td></tr>
<tr class="separator:a37fb85e001edd300d7658fe2f15de2c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ffa16dd00190b217527f1d74ad5392f"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a2ffa16dd00190b217527f1d74ad5392f">remap_stdx_pipes</a> (int readPipe, int writePipe)</td></tr>
<tr class="separator:a2ffa16dd00190b217527f1d74ad5392f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a98d9de25381dc431c857014752148c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a1a98d9de25381dc431c857014752148c">isNonErrorProcExit</a> (int ecode, int normalCode)</td></tr>
<tr class="separator:a1a98d9de25381dc431c857014752148c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1178fee357c5a904b2c46a84a3b23e41"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a1178fee357c5a904b2c46a84a3b23e41">windowIdentifierFromAppAndProcessId</a> (const std::string &amp;appId, const std::string &amp;processId)</td></tr>
<tr class="separator:a1178fee357c5a904b2c46a84a3b23e41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e384f5d6ac2885fcf1d7de5d6f980b4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a5e384f5d6ac2885fcf1d7de5d6f980b4">splitWindowIdentifierToAppAndProcessId</a> (const std::string &amp;id, std::string &amp;appId, std::string &amp;processId)</td></tr>
<tr class="separator:a5e384f5d6ac2885fcf1d7de5d6f980b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7dee3598bfa2ad34df0c1848e2b206c"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#ad7dee3598bfa2ad34df0c1848e2b206c">getHtml5DatabaseFolderNameForApp</a> (const std::string &amp;appId, std::string appFolderPath)</td></tr>
<tr class="separator:ad7dee3598bfa2ad34df0c1848e2b206c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adefcfbab7eacbece8873de9d48d2a976"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#adefcfbab7eacbece8873de9d48d2a976">_malloc_thread_cleanup</a> (void) __attribute__((weak))</td></tr>
<tr class="separator:adefcfbab7eacbece8873de9d48d2a976"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae67f11581254d7943e82b945b4419d14"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#ae67f11581254d7943e82b945b4419d14">threadCleanup</a> ()</td></tr>
<tr class="separator:ae67f11581254d7943e82b945b4419d14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fab6255a02987bf29a913a6849811f4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a9fab6255a02987bf29a913a6849811f4">extractFromJson</a> (const std::string &amp;jsonString, const std::string &amp;key, std::string &amp;r_value)</td></tr>
<tr class="separator:a9fab6255a02987bf29a913a6849811f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1839ee4fc8f4340860a93d70fa41313b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a1839ee4fc8f4340860a93d70fa41313b">extractFromJson</a> (struct json_object *root, const std::string &amp;key, std::string &amp;r_value)</td></tr>
<tr class="separator:a1839ee4fc8f4340860a93d70fa41313b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23f0f5db1b55afe7e9a179491917bafb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a23f0f5db1b55afe7e9a179491917bafb">extractFromJson</a> (struct json_object *root, const std::string &amp;key, int &amp;r_value)</td></tr>
<tr class="separator:a23f0f5db1b55afe7e9a179491917bafb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed336f5176aea43c348ecb280c4d3b12"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#aed336f5176aea43c348ecb280c4d3b12">extractFromJson</a> (struct json_object *root, const std::string &amp;key, bool &amp;r_value)</td></tr>
<tr class="separator:aed336f5176aea43c348ecb280c4d3b12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ed01ff9e10504a1537261d732fe9854"><td class="memItemLeft" align="right" valign="top">struct json_object *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a0ed01ff9e10504a1537261d732fe9854">JsonGetObject</a> (struct json_object *root, const std::string &amp;key)</td></tr>
<tr class="separator:a0ed01ff9e10504a1537261d732fe9854"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af218d8d076a8a9ee46abf1e5c368c84f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#af218d8d076a8a9ee46abf1e5c368c84f">base64_encode</a> (unsigned char const *bytes_to_encode, unsigned int in_len)</td></tr>
<tr class="separator:af218d8d076a8a9ee46abf1e5c368c84f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6aadb8d0defecbf515807f468ab1c40f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a6aadb8d0defecbf515807f468ab1c40f">base64_decode</a> (std::string const &amp;encoded)</td></tr>
<tr class="separator:a6aadb8d0defecbf515807f468ab1c40f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5229b0ef0f36d68644490367c7d2d76c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a5229b0ef0f36d68644490367c7d2d76c">doesExistOnFilesystem</a> (const char *pathAndFile)</td></tr>
<tr class="separator:a5229b0ef0f36d68644490367c7d2d76c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f69e511bf2b5371dd99ab06aa5a79be"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a6f69e511bf2b5371dd99ab06aa5a79be">fileCopy</a> (const char *srcFileAndPath, const char *dstFileAndPath)</td></tr>
<tr class="separator:a6f69e511bf2b5371dd99ab06aa5a79be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5a0ff9558909cecf98fee8aedf02573"><td class="memItemLeft" align="right" valign="top">gboolean&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#aa5a0ff9558909cecf98fee8aedf02573">compare_regex</a> (const gchar *regex, const gchar *string)</td></tr>
<tr class="separator:aa5a0ff9558909cecf98fee8aedf02573"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfae98c927bc1b46d7e222094c0c58c4"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#abfae98c927bc1b46d7e222094c0c58c4">determineEnclosingDir</a> (const std::string &amp;fileNameAndPath, std::string &amp;r_enclosingDir)</td></tr>
<tr class="separator:abfae98c927bc1b46d7e222094c0c58c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc7b9cb9ad698546ece9e8fbc5f49f80"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#acc7b9cb9ad698546ece9e8fbc5f49f80">string_printf</a> (const char *format,...)</td></tr>
<tr class="separator:acc7b9cb9ad698546ece9e8fbc5f49f80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3104cf4a599de4bc81feeef82f309360"><td class="memItemLeft" align="right" valign="top">std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Utils_8cpp.htm#a3104cf4a599de4bc81feeef82f309360">append_format</a> (std::string &amp;str, const char *format,...)</td></tr>
<tr class="separator:a3104cf4a599de4bc81feeef82f309360"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a class="anchor" id="abedad29eea1a103f6c5d19f92170b7e1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define DUPFD</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">ofd, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">nfd&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;(dup2(ofd, nfd) == 0  &amp;&amp;  close(ofd) == 0)</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a64e8389b0e7b389c7c43a55a92289bd9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define RDBUFFSIZE&#160;&#160;&#160;(1024*32)</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="adefcfbab7eacbece8873de9d48d2a976"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void _malloc_thread_cleanup </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a3104cf4a599de4bc81feeef82f309360"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string&amp; append_format </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>...</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a6aadb8d0defecbf515807f468ab1c40f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string base64_decode </td>
          <td>(</td>
          <td class="paramtype">std::string const &amp;&#160;</td>
          <td class="paramname"><em>encoded</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="af218d8d076a8a9ee46abf1e5c368c84f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string base64_encode </td>
          <td>(</td>
          <td class="paramtype">unsigned char const *&#160;</td>
          <td class="paramname"><em>bytes_to_encode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>in_len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="aa5a0ff9558909cecf98fee8aedf02573"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">gboolean compare_regex </td>
          <td>(</td>
          <td class="paramtype">const gchar *&#160;</td>
          <td class="paramname"><em>regex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const gchar *&#160;</td>
          <td class="paramname"><em>string</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ae2dbeeeeb3b63b1cc70aa056d32e1252"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool concatToTempFile </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>files</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>tempDir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>r_outputFile</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a61f83aebdbdd924d6511d7b100b18a44"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long currentTimeMs </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="afe2ffea7f45c7592f3bcc529683615fa"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool deleteFile </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filePath</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="abfae98c927bc1b46d7e222094c0c58c4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int determineEnclosingDir </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>fileNameAndPath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>r_enclosingDir</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a5229b0ef0f36d68644490367c7d2d76c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool doesExistOnFilesystem </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>pathAndFile</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a9fab6255a02987bf29a913a6849811f4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool extractFromJson </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>jsonString</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>r_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a1839ee4fc8f4340860a93d70fa41313b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool extractFromJson </td>
          <td>(</td>
          <td class="paramtype">struct json_object *&#160;</td>
          <td class="paramname"><em>root</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>r_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a23f0f5db1b55afe7e9a179491917bafb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool extractFromJson </td>
          <td>(</td>
          <td class="paramtype">struct json_object *&#160;</td>
          <td class="paramname"><em>root</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>r_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="aed336f5176aea43c348ecb280c4d3b12"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool extractFromJson </td>
          <td>(</td>
          <td class="paramtype">struct json_object *&#160;</td>
          <td class="paramname"><em>root</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool &amp;&#160;</td>
          <td class="paramname"><em>r_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a6f69e511bf2b5371dd99ab06aa5a79be"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int fileCopy </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>srcFileAndPath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>dstFileAndPath</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ad7dee3598bfa2ad34df0c1848e2b206c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string getHtml5DatabaseFolderNameForApp </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>appId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>appFolderPath</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ab07756d17c36c23e8095fa95485f6103"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool getNthSubstring </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>dest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>delims</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a79621815108cf7e928bf6f4fcfa8aea7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string getResourceNameFromUrl </td>
          <td>(</td>
          <td class="paramtype">const QUrl &amp;&#160;</td>
          <td class="paramname"><em>url</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a1a98d9de25381dc431c857014752148c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isNonErrorProcExit </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ecode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>normalCode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a0ed01ff9e10504a1537261d732fe9854"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">struct json_object* JsonGetObject </td>
          <td>(</td>
          <td class="paramtype">struct json_object *&#160;</td>
          <td class="paramname"><em>root</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">read</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a1c21024afc29d8646335ba5b36bee9da"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">time_t localTime </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a204e2f13079dae86310219e4cbbbcf06"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* readFile </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filePath</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a2ffa16dd00190b217527f1d74ad5392f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int remap_stdx_pipes </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>readPipe</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>writePipe</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a8ab18e0440495aee30a8405b8d086a71"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void setPosTopLeft </td>
          <td>(</td>
          <td class="paramtype">QGraphicsItem *&#160;</td>
          <td class="paramname"><em>item</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a981edd1f2cd488512dfc8734377e3f64"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int splitFileAndExtension </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>srcFileAndExt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>filePart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>extensionPart</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a004641b53fefa228d1655c96cd431a0e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int splitFileAndPath </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>srcPathAndFile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>pathPart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>filePart</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a37fb85e001edd300d7658fe2f15de2c5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int splitStringOnKey </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>returnSplitSubstrings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>baseStr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>delims</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a5e384f5d6ac2885fcf1d7de5d6f980b4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool splitWindowIdentifierToAppAndProcessId </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>appId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>processId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="acc7b9cb9ad698546ece9e8fbc5f49f80"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string string_printf </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>...</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ae67f11581254d7943e82b945b4419d14"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void threadCleanup </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a62066e3517f95a54f4da7b1f2cffb941"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string trimWhitespace </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>drop</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a1178fee357c5a904b2c46a84a3b23e41"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string windowIdentifierFromAppAndProcessId </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>appId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>processId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a375f0b9e36aad193f4e9ee1d59c65660"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool writeFile </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filePath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>buffer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ac95b4ab7fc2fd22c63687a6bbb338e36"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool writeFile </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filePath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">QByteArray&#160;</td>
          <td class="paramname"><em>buffer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="aee3eaf1c6bb0cec2c83122d013410262"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool writeToTempFile </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>tempDir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>r_outputFile</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7ad75451c78bc5a009a282cdc0c3526e.htm">luna-sysmgr-common</a></li><li class="navelem"><a class="el" href="dir_a5bfe0c2762aa51214191d6bfb8408ad.htm">Src</a></li><li class="navelem"><a class="el" href="dir_a01f2268aa659d6ca38ba61255c9581a.htm">base</a></li><li class="navelem"><a class="el" href="Utils_8cpp.htm">Utils.cpp</a></li>
    <li class="footer">Generated on Fri Jun 21 2013 00:48:48 for luna-sysmgr-common by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
