<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>luna-sysmgr-common: sptr&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">luna-sysmgr-common
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classsptr.htm','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classsptr-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">sptr&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="sptr_8h_source.htm">sptr.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a036c75d3dc6d2cc59a891c0e1804e0f2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsptr.htm#a036c75d3dc6d2cc59a891c0e1804e0f2">sptr</a> (T *ptr)</td></tr>
<tr class="separator:a036c75d3dc6d2cc59a891c0e1804e0f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82266516988d2da7bca6253d2cccf1a7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsptr.htm#a82266516988d2da7bca6253d2cccf1a7">sptr</a> ()</td></tr>
<tr class="separator:a82266516988d2da7bca6253d2cccf1a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a1cfbb45eb1394feed6ed447bd34559"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsptr.htm#a5a1cfbb45eb1394feed6ed447bd34559">sptr</a> (const <a class="el" href="classsptr.htm">sptr</a>&lt; T &gt; &amp;s)</td></tr>
<tr class="separator:a5a1cfbb45eb1394feed6ed447bd34559"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9e2e7c030055fbba4f731d2c4ee7e4d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsptr.htm#ad9e2e7c030055fbba4f731d2c4ee7e4d">~sptr</a> ()</td></tr>
<tr class="separator:ad9e2e7c030055fbba4f731d2c4ee7e4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4088980787bb2a77df78b7770736a587"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsptr.htm#a4088980787bb2a77df78b7770736a587">operator=</a> (const <a class="el" href="classsptr.htm">sptr</a>&lt; T &gt; &amp;s)</td></tr>
<tr class="separator:a4088980787bb2a77df78b7770736a587"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63af85a6cf217a8b3ca911a9196d155b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsptr.htm#a63af85a6cf217a8b3ca911a9196d155b">operator=</a> (T *ptr)</td></tr>
<tr class="separator:a63af85a6cf217a8b3ca911a9196d155b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaea897c9bd46da1b8a1b12156315f56a"><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsptr.htm#aaea897c9bd46da1b8a1b12156315f56a">operator-&gt;</a> () const </td></tr>
<tr class="separator:aaea897c9bd46da1b8a1b12156315f56a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e30db09769e8fe67f8b17fa1c01f51d"><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsptr.htm#a1e30db09769e8fe67f8b17fa1c01f51d">get</a> () const </td></tr>
<tr class="separator:a1e30db09769e8fe67f8b17fa1c01f51d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada8401137c050321a78342fdf47014c7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsptr.htm#ada8401137c050321a78342fdf47014c7">operator==</a> (const <a class="el" href="classsptr.htm">sptr</a>&lt; T &gt; &amp;p) const </td></tr>
<tr class="separator:ada8401137c050321a78342fdf47014c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c014677946d8a455f2dcf13345d953b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsptr.htm#a8c014677946d8a455f2dcf13345d953b">operator!=</a> (const <a class="el" href="classsptr.htm">sptr</a>&lt; T &gt; &amp;p) const </td></tr>
<tr class="separator:a8c014677946d8a455f2dcf13345d953b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66f2f17761473cc28137fa47a1e4af03"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsptr.htm#a66f2f17761473cc28137fa47a1e4af03">operator==</a> (T *p) const </td></tr>
<tr class="separator:a66f2f17761473cc28137fa47a1e4af03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8ef84d82ad459222a0d912d3126a15b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsptr.htm#ad8ef84d82ad459222a0d912d3126a15b">operator!=</a> (T *p) const </td></tr>
<tr class="separator:ad8ef84d82ad459222a0d912d3126a15b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class T&gt;<br/>
class sptr&lt; T &gt;</h3>

<p>Smart pointer object</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000025">Todo:</a></b></dt><dd>Limit this class to only being used on derivatives of <a class="el" href="classRefCounted.htm">RefCounted</a>.</dd></dl>
<p>Smart pointers are a way of having a pointer that automatically tracks use and cleans up the object it points to when nobody is using it. It's a convenience class so pointer users don't have to worry about cleaning up objects they're pointing to. If everything that uses a pointer uses this class, memory should stay much cleaner over long running times by preventing memory leaks from code not explicitly cleaning up the memory it uses.</p>
<p>This class is basically a drop-in replacement for a regular pointer which can be used for pointing to any class that derives from <a class="el" href="classRefCounted.htm">RefCounted</a>. It handles the details of tracking the reference count automatically. By using this smart pointer object, you should never have to worry about calling <a class="el" href="classRefCounted.htm#a1932b96104186ea7423d53648e2272b1">RefCounted::ref()</a>, <a class="el" href="classRefCounted.htm#afdf76a72ff2ba5f755c4d954c0680480">RefCounted::deref()</a>, or cleaning up memory. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a036c75d3dc6d2cc59a891c0e1804e0f2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsptr.htm">sptr</a>&lt; T &gt;::<a class="el" href="classsptr.htm">sptr</a> </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Initializes a smart pointer to a reference counted object</p>
<p>Since this is a new pointer to the object, its reference count needs to track that there's a new pointer to it. By doing that here, we insulate the user of this smart pointer from having to worry about that.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptr</td><td>Pointer to object to make a smart pointer to </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a82266516988d2da7bca6253d2cccf1a7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsptr.htm">sptr</a>&lt; T &gt;::<a class="el" href="classsptr.htm">sptr</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Initialize a null smart pointer</p>
<p>There may be times where a function requires a smart pointer but you want to indicate a null. This constructor allows that without trying to call <a class="el" href="classRefCounted.htm#a1932b96104186ea7423d53648e2272b1">RefCounted::ref()</a> on a null pointer and crashing the program. </p>

</div>
</div>
<a class="anchor" id="a5a1cfbb45eb1394feed6ed447bd34559"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsptr.htm">sptr</a>&lt; T &gt;::<a class="el" href="classsptr.htm">sptr</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsptr.htm">sptr</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Copy another smart pointer</p>
<p>This copy constructor allows you to copy another smart pointer into this one. Since it is a new pointer to the same object, we need to indicate that to the <a class="el" href="classRefCounted.htm">RefCounted</a> object so it can track when to clean up. So we increment the reference count here so if the "copied from" smart pointer is deleted, it's still tracking our new pointer.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>Smart pointer to copy </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad9e2e7c030055fbba4f731d2c4ee7e4d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsptr.htm">sptr</a>&lt; T &gt;::~<a class="el" href="classsptr.htm">sptr</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Clean up smart pointer</p>
<p>We're now getting rid of a smart pointer, which means we need to let our target object know that. Tell it by calling <a class="el" href="classRefCounted.htm#afdf76a72ff2ba5f755c4d954c0680480">RefCounted::deref()</a> on it. Once we no longer have any pointers to the object, it may just clean itself up, but that's up to the target object to decide. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a1e30db09769e8fe67f8b17fa1c01f51d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="classsptr.htm">sptr</a>&lt; T &gt;::get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Gets a pointer to the target object for this smart pointer</p>
<p>Gets the "regular pointer" version of this smart pointer - essentially a regular pointer straight to the target object without using any reference counting functionality.</p>
<dl class="section return"><dt>Returns</dt><dd>Pointer to object being pointed to </dd></dl>

</div>
</div>
<a class="anchor" id="a8c014677946d8a455f2dcf13345d953b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsptr.htm">sptr</a>&lt; T &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsptr.htm">sptr</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Smart pointer inequality operator</p>
<p>Checks to see if this smart pointer does not point to the same class instance as another smart pointer.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>Smart pointer to check for inequality </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad8ef84d82ad459222a0d912d3126a15b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsptr.htm">sptr</a>&lt; T &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Regular pointer inequality operator</p>
<p>Checks to see if this smart pointer does not point to the same class instance as a regular pointer.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>Pointer to check for inequality </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aaea897c9bd46da1b8a1b12156315f56a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="classsptr.htm">sptr</a>&lt; T &gt;::operator-&gt; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Dereference operator</p>
<p>This operator allows code to access the object being pointed to by a smart pointer using exactly the same dereferencing syntax of a regular pointer, once again making smart pointers largely a drop-in replacement for regular pointers with minimal code changes.</p>
<dl class="section return"><dt>Returns</dt><dd>Pointer to object being pointed to </dd></dl>

</div>
</div>
<a class="anchor" id="a4088980787bb2a77df78b7770736a587"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsptr.htm">sptr</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsptr.htm">sptr</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Smart pointer copy operator</p>
<p>This operator is called when you set a smart pointer = another smart pointer. But it's not quite that simple. Since we're copying a pointer to another pointer, we're having a new pointer point to the same object, which means we need to tell that object about it so it can track it for cleanup. Without this, it could potentially delete itself from memory if the "copied from" pointer is cleaned up, leaving the new copy with an invalid pointer.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>Smart pointer to copy </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a63af85a6cf217a8b3ca911a9196d155b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsptr.htm">sptr</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Pointer copy operator</p>
<p>This operator is similar to the smart pointer copy operator, but has one interesting difference. This is an overloaded version that is triggered when copying from a regular pointer instead of another smart pointer. This allows for compatibility with non-smart pointer code and largely allows smart pointers to be used as a drop-in replacement for regular pointers.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptr</td><td>Pointer to object to point to </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ada8401137c050321a78342fdf47014c7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsptr.htm">sptr</a>&lt; T &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsptr.htm">sptr</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Smart pointer equality operator</p>
<p>Checks to see if this smart pointer points to the same class instance as another smart pointer.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>Smart pointer to check for equality </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a66f2f17761473cc28137fa47a1e4af03"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsptr.htm">sptr</a>&lt; T &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Regular pointer equality operator</p>
<p>Checks to see if this smart pointer points to the same class instance as a regular pointer.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>Pointer to check for equality </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="sptr_8h_source.htm">sptr.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="classsptr.htm">sptr</a></li>
    <li class="footer">Generated on Fri Jun 21 2013 00:48:48 for luna-sysmgr-common by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
