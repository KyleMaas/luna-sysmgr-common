<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>luna-sysmgr-common: HostBase Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">luna-sysmgr-common
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classHostBase.htm','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#signals">Signals</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classHostBase-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">HostBase Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="HostBase_8h_source.htm">HostBase.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for HostBase:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classHostBase__inherit__graph.svg" width="742" height="360"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.htm">legend</a>]</span></center></div>
<div class="dynheader">
Collaboration diagram for HostBase:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classHostBase__coll__graph.svg" width="960" height="756"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="signals"></a>
Signals</h2></td></tr>
<tr class="memitem:a0909a8a75b8df50b2115d06a5ab559d9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a0909a8a75b8df50b2115d06a5ab559d9">signalBluetoothKeyboardActive</a> (bool active)</td></tr>
<tr class="separator:a0909a8a75b8df50b2115d06a5ab559d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:abc1bcd5c42d2eb5451a8170379cae304"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#abc1bcd5c42d2eb5451a8170379cae304">~HostBase</a> ()</td></tr>
<tr class="separator:abc1bcd5c42d2eb5451a8170379cae304"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ada2c44250d792df0a01b69b4b2e0e1"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a0ada2c44250d792df0a01b69b4b2e0e1">init</a> (int w, int h)=0</td></tr>
<tr class="separator:a0ada2c44250d792df0a01b69b4b2e0e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefce63a753901dc2be5aaad540fc8f25"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#aefce63a753901dc2be5aaad540fc8f25">show</a> ()</td></tr>
<tr class="separator:aefce63a753901dc2be5aaad540fc8f25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ced00bfde3ed358720ac3c5f31d5048"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structHostInfo.htm">HostInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a8ced00bfde3ed358720ac3c5f31d5048">getInfo</a> () const </td></tr>
<tr class="separator:a8ced00bfde3ed358720ac3c5f31d5048"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12aff8262b4bf30d3cb6e0af32909011"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a12aff8262b4bf30d3cb6e0af32909011">run</a> ()</td></tr>
<tr class="separator:a12aff8262b4bf30d3cb6e0af32909011"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c70ea03b8347e1bf1ca3df833324379"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a6c70ea03b8347e1bf1ca3df833324379">quit</a> ()</td></tr>
<tr class="separator:a6c70ea03b8347e1bf1ca3df833324379"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5835840c718876c380bfa12e1e85e329"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a5835840c718876c380bfa12e1e85e329">hardwareName</a> () const =0</td></tr>
<tr class="separator:a5835840c718876c380bfa12e1e85e329"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d837481808ec34d2a832d5af182c897"><td class="memItemLeft" align="right" valign="top">virtual unsigned short&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a1d837481808ec34d2a832d5af182c897">translateKeyWithMeta</a> (unsigned short key, bool withShift, bool withAlt)</td></tr>
<tr class="separator:a1d837481808ec34d2a832d5af182c897"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7aac96a702507f19f24f0a9e3195700"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#ac7aac96a702507f19f24f0a9e3195700">lockPainting</a> ()</td></tr>
<tr class="separator:ac7aac96a702507f19f24f0a9e3195700"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64e347099fa6beeaeafd1c180a124d44"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a64e347099fa6beeaeafd1c180a124d44">unlockPainting</a> ()</td></tr>
<tr class="separator:a64e347099fa6beeaeafd1c180a124d44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3899b37381505a5e346d15235b11d31c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a3899b37381505a5e346d15235b11d31c">setMetaModifier</a> (bool metaKeyDown)</td></tr>
<tr class="separator:a3899b37381505a5e346d15235b11d31c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95919e14b25a77f1d70b688855fbeb48"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a95919e14b25a77f1d70b688855fbeb48">metaModifier</a> ()</td></tr>
<tr class="separator:a95919e14b25a77f1d70b688855fbeb48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d1c61d48230e0fcb4705ccddb886d3d"><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a0d1c61d48230e0fcb4705ccddb886d3d">getNumberOfSwitches</a> () const </td></tr>
<tr class="separator:a0d1c61d48230e0fcb4705ccddb886d3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae46ba603ab5ae5b38a66bb95f06708a2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#ae46ba603ab5ae5b38a66bb95f06708a2">turboModeSubscription</a> (bool add)</td></tr>
<tr class="separator:ae46ba603ab5ae5b38a66bb95f06708a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34c4fd34fe3322859382f3bc11443758"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a34c4fd34fe3322859382f3bc11443758">setCentralWidget</a> (<a class="el" href="classQWidget.htm">QWidget</a> *view)</td></tr>
<tr class="separator:a34c4fd34fe3322859382f3bc11443758"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd2faa65456a6ee015d885edbf862818"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#abd2faa65456a6ee015d885edbf862818">flip</a> ()</td></tr>
<tr class="separator:abd2faa65456a6ee015d885edbf862818"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafe87f833c0d66f493894845a11eb36a"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#aafe87f833c0d66f493894845a11eb36a">hasAltKey</a> (Qt::KeyboardModifiers modifiers)</td></tr>
<tr class="separator:aafe87f833c0d66f493894845a11eb36a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4eb89f53ab0a1f0295deeec6ef1e86d4"><td class="memItemLeft" align="right" valign="top">virtual QImage&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a4eb89f53ab0a1f0295deeec6ef1e86d4">takeScreenShot</a> () const </td></tr>
<tr class="separator:a4eb89f53ab0a1f0295deeec6ef1e86d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77b77c3bf9d7a51d43e8109012046229"><td class="memItemLeft" align="right" valign="top">virtual QImage&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a77b77c3bf9d7a51d43e8109012046229">takeAppDirectRenderingScreenShot</a> () const </td></tr>
<tr class="separator:a77b77c3bf9d7a51d43e8109012046229"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e75d775b407727518e9d202747e4ce6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a8e75d775b407727518e9d202747e4ce6">setAppDirectRenderingLayerEnabled</a> (bool enable)</td></tr>
<tr class="separator:a8e75d775b407727518e9d202747e4ce6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32006e1c0cea07b0b2b93075a71b1eb8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a32006e1c0cea07b0b2b93075a71b1eb8">setOrientation</a> (<a class="el" href="classOrientationEvent.htm#a971894297d09205ac67571c3957f560a">OrientationEvent::Orientation</a> o)</td></tr>
<tr class="separator:a32006e1c0cea07b0b2b93075a71b1eb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20cf499b6e9597d72c33c9ad731f3732"><td class="memItemLeft" align="right" valign="top">QPoint&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a20cf499b6e9597d72c33c9ad731f3732">map</a> (const QPoint &amp;pt)</td></tr>
<tr class="separator:a20cf499b6e9597d72c33c9ad731f3732"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ac0c673700f4ef06d46ec7cbf85239d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a5ac0c673700f4ef06d46ec7cbf85239d">setRenderingLayerEnabled</a> (bool enable)</td></tr>
<tr class="separator:a5ac0c673700f4ef06d46ec7cbf85239d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14c5ed55ae8c96d12902f27264b382b1"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classInputControl.htm">InputControl</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a14c5ed55ae8c96d12902f27264b382b1">getInputControlALS</a> ()</td></tr>
<tr class="separator:a14c5ed55ae8c96d12902f27264b382b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab2febe25815882de090c92f7c93076b"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classInputControl.htm">InputControl</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#aab2febe25815882de090c92f7c93076b">getInputControlBluetoothInputDetect</a> ()</td></tr>
<tr class="separator:aab2febe25815882de090c92f7c93076b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1be60ebd18bf74010a6e48441feba8a8"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classInputControl.htm">InputControl</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a1be60ebd18bf74010a6e48441feba8a8">getInputControlProximity</a> ()</td></tr>
<tr class="separator:a1be60ebd18bf74010a6e48441feba8a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50b0466b4bd8a8948532f085b229da96"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classInputControl.htm">InputControl</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a50b0466b4bd8a8948532f085b229da96">getInputControlTouchpanel</a> ()</td></tr>
<tr class="separator:a50b0466b4bd8a8948532f085b229da96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a462397bd3df761447abbf58d972081a9"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classInputControl.htm">InputControl</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a462397bd3df761447abbf58d972081a9">getInputControlKeys</a> ()</td></tr>
<tr class="separator:a462397bd3df761447abbf58d972081a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e1396c230ce0aadec60a742259c1d36"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classLedControl.htm">LedControl</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a4e1396c230ce0aadec60a742259c1d36">getLedControlKeypadAndDisplay</a> ()</td></tr>
<tr class="separator:a4e1396c230ce0aadec60a742259c1d36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a242c246df15f73a588a5027cf46cb580"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a242c246df15f73a588a5027cf46cb580">OrientationSensorOn</a> (bool enable)</td></tr>
<tr class="separator:a242c246df15f73a588a5027cf46cb580"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae80e32785170b3f3e4268fc22b727b86"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOrientationEvent.htm">OrientationEvent</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#ae80e32785170b3f3e4268fc22b727b86">postProcessDeviceOrientation</a> (<a class="el" href="classOrientationEvent.htm">OrientationEvent</a> *currOrientation)</td></tr>
<tr class="separator:ae80e32785170b3f3e4268fc22b727b86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad38805fb652479658b5831ef2a85926"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#aad38805fb652479658b5831ef2a85926">homeButtonWakesUpScreen</a> ()</td></tr>
<tr class="separator:aad38805fb652479658b5831ef2a85926"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90abfa30f83b6f66ac435a3baa4dcce4"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a90abfa30f83b6f66ac435a3baa4dcce4">setBluetoothKeyboardActive</a> (bool active)</td></tr>
<tr class="separator:a90abfa30f83b6f66ac435a3baa4dcce4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7a97a39aca19814ec7b038bd8f93bc1"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#af7a97a39aca19814ec7b038bd8f93bc1">bluetoothKeyboardActive</a> () const </td></tr>
<tr class="separator:af7a97a39aca19814ec7b038bd8f93bc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classTaskBase"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classTaskBase')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classTaskBase.htm">TaskBase</a></td></tr>
<tr class="memitem:ad1abe361d54207f1bb4e0e2f87e8251c inherit pub_methods_classTaskBase"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#ad1abe361d54207f1bb4e0e2f87e8251c">TaskBase</a> ()</td></tr>
<tr class="separator:ad1abe361d54207f1bb4e0e2f87e8251c inherit pub_methods_classTaskBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a1aa8cdd317717be35592265762faa1 inherit pub_methods_classTaskBase"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a7a1aa8cdd317717be35592265762faa1">~TaskBase</a> ()</td></tr>
<tr class="separator:a7a1aa8cdd317717be35592265762faa1 inherit pub_methods_classTaskBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87d3ceb4097dfd5969ebf4405b3dd118 inherit pub_methods_classTaskBase"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a87d3ceb4097dfd5969ebf4405b3dd118">postEvent</a> (<a class="el" href="classsptr.htm">sptr</a>&lt; <a class="el" href="classEvent.htm">Event</a> &gt; event, bool highPriority=false)</td></tr>
<tr class="separator:a87d3ceb4097dfd5969ebf4405b3dd118 inherit pub_methods_classTaskBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96aff6fff43b856e985a6b6ced6d5af9 inherit pub_methods_classTaskBase"><td class="memItemLeft" align="right" valign="top">GMainLoop *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a96aff6fff43b856e985a6b6ced6d5af9">mainLoop</a> () const </td></tr>
<tr class="separator:a96aff6fff43b856e985a6b6ced6d5af9 inherit pub_methods_classTaskBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d02fef1170fa299c2be8c7a89d992ee inherit pub_methods_classTaskBase"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classSingletonTimer.htm">SingletonTimer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a6d02fef1170fa299c2be8c7a89d992ee">masterTimer</a> () const </td></tr>
<tr class="separator:a6d02fef1170fa299c2be8c7a89d992ee inherit pub_methods_classTaskBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classRefCounted"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classRefCounted')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classRefCounted.htm">RefCounted</a></td></tr>
<tr class="memitem:a0f4d8212944ba431ea79c4fc55f093f8 inherit pub_methods_classRefCounted"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRefCounted.htm#a0f4d8212944ba431ea79c4fc55f093f8">RefCounted</a> ()</td></tr>
<tr class="separator:a0f4d8212944ba431ea79c4fc55f093f8 inherit pub_methods_classRefCounted"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e65f84e3e6cc1c2c633b97a19d49246 inherit pub_methods_classRefCounted"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRefCounted.htm#a5e65f84e3e6cc1c2c633b97a19d49246">~RefCounted</a> ()</td></tr>
<tr class="separator:a5e65f84e3e6cc1c2c633b97a19d49246 inherit pub_methods_classRefCounted"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1932b96104186ea7423d53648e2272b1 inherit pub_methods_classRefCounted"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRefCounted.htm#a1932b96104186ea7423d53648e2272b1">ref</a> ()</td></tr>
<tr class="separator:a1932b96104186ea7423d53648e2272b1 inherit pub_methods_classRefCounted"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdf76a72ff2ba5f755c4d954c0680480 inherit pub_methods_classRefCounted"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRefCounted.htm#afdf76a72ff2ba5f755c4d954c0680480">deref</a> ()</td></tr>
<tr class="separator:afdf76a72ff2ba5f755c4d954c0680480 inherit pub_methods_classRefCounted"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ac0615bded33adf0ad86fda0f27b040c2"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classHostBase.htm">HostBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#ac0615bded33adf0ad86fda0f27b040c2">instance</a> ()</td></tr>
<tr class="separator:ac0615bded33adf0ad86fda0f27b040c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6ef80b32e862db109167ef6d436e170"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#ac6ef80b32e862db109167ef6d436e170">hostIsQemu</a> ()</td></tr>
<tr class="separator:ac6ef80b32e862db109167ef6d436e170"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a39006d2b759b1b297647e283ef8dfe6f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a39006d2b759b1b297647e283ef8dfe6f">HostBase</a> ()</td></tr>
<tr class="separator:a39006d2b759b1b297647e283ef8dfe6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a306567c56c8b87c98d440e151a6c1275"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a306567c56c8b87c98d440e151a6c1275">handleEvent</a> (<a class="el" href="classsptr.htm">sptr</a>&lt; <a class="el" href="classEvent.htm">Event</a> &gt;)</td></tr>
<tr class="separator:a306567c56c8b87c98d440e151a6c1275"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83e9d336db1554aed7e787bd0d0cada2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a83e9d336db1554aed7e787bd0d0cada2">turboMode</a> (bool enable)</td></tr>
<tr class="separator:a83e9d336db1554aed7e787bd0d0cada2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:ab13670cd01fe840cffa477b36234cdd3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structHostInfo.htm">HostInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#ab13670cd01fe840cffa477b36234cdd3">m_info</a></td></tr>
<tr class="separator:ab13670cd01fe840cffa477b36234cdd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5faac341cd6686188e124e9300d493a5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMutex.htm">Mutex</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a5faac341cd6686188e124e9300d493a5">m_paintMutex</a></td></tr>
<tr class="separator:a5faac341cd6686188e124e9300d493a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b7d33ca0cd0606f5bc5676ce024a3d5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a6b7d33ca0cd0606f5bc5676ce024a3d5">m_metaKeyDown</a></td></tr>
<tr class="separator:a6b7d33ca0cd0606f5bc5676ce024a3d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb9d5c1dbab87500dc8635b0736b2726"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOrientationEvent.htm#a971894297d09205ac67571c3957f560a">OrientationEvent::Orientation</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#adb9d5c1dbab87500dc8635b0736b2726">m_orientation</a></td></tr>
<tr class="separator:adb9d5c1dbab87500dc8635b0736b2726"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a062a39ed237dc2304c458a817328ad5c"><td class="memItemLeft" align="right" valign="top">QTransform&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a062a39ed237dc2304c458a817328ad5c">m_trans</a></td></tr>
<tr class="separator:a062a39ed237dc2304c458a817328ad5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22536f7dce86ddf9d5320beb18edf6fc"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#a22536f7dce86ddf9d5320beb18edf6fc">m_numBuffers</a></td></tr>
<tr class="separator:a22536f7dce86ddf9d5320beb18edf6fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae213d89f606c81074305f0a40ee4da38"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHostBase.htm#ae213d89f606c81074305f0a40ee4da38">m_turboModeSubscriptions</a></td></tr>
<tr class="separator:ae213d89f606c81074305f0a40ee4da38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classTaskBase"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classTaskBase')"><img src="closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="classTaskBase.htm">TaskBase</a></td></tr>
<tr class="memitem:a55151f8de8aec43e48186633453ed86d inherit pro_attribs_classTaskBase"><td class="memItemLeft" align="right" valign="top">GMainContext *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a55151f8de8aec43e48186633453ed86d">m_mainCtxt</a></td></tr>
<tr class="separator:a55151f8de8aec43e48186633453ed86d inherit pro_attribs_classTaskBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34b5b86cb2d9c794ba9e3c0708840549 inherit pro_attribs_classTaskBase"><td class="memItemLeft" align="right" valign="top">GMainLoop *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a34b5b86cb2d9c794ba9e3c0708840549">m_mainLoop</a></td></tr>
<tr class="separator:a34b5b86cb2d9c794ba9e3c0708840549 inherit pro_attribs_classTaskBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4b112c73aece7683b4e23316e672a7e inherit pro_attribs_classTaskBase"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMutex.htm">Mutex</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#ae4b112c73aece7683b4e23316e672a7e">m_mutex</a></td></tr>
<tr class="separator:ae4b112c73aece7683b4e23316e672a7e inherit pro_attribs_classTaskBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2559a82f77d3dfb1171234db3ed6f205 inherit pro_attribs_classTaskBase"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMutex.htm">Mutex</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a2559a82f77d3dfb1171234db3ed6f205">m_eventsMutex</a></td></tr>
<tr class="separator:a2559a82f77d3dfb1171234db3ed6f205 inherit pro_attribs_classTaskBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77871e74bfdb9d86e609aa7d0f2fa1ab inherit pro_attribs_classTaskBase"><td class="memItemLeft" align="right" valign="top">std::list&lt; <a class="el" href="classsptr.htm">sptr</a>&lt; <a class="el" href="classEvent.htm">Event</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a77871e74bfdb9d86e609aa7d0f2fa1ab">m_eventsList</a></td></tr>
<tr class="separator:a77871e74bfdb9d86e609aa7d0f2fa1ab inherit pro_attribs_classTaskBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29a486e0ac57b8b9dfbf2ff5b1fffc27 inherit pro_attribs_classTaskBase"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classAsyncCaller.htm">AsyncCaller</a>&lt; <a class="el" href="classTaskBase.htm">TaskBase</a> &gt; *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a29a486e0ac57b8b9dfbf2ff5b1fffc27">m_asyncCaller</a></td></tr>
<tr class="separator:a29a486e0ac57b8b9dfbf2ff5b1fffc27 inherit pro_attribs_classTaskBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53a66ed61d8441dd37f31a85e83720c2 inherit pro_attribs_classTaskBase"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classSingletonTimer.htm">SingletonTimer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a53a66ed61d8441dd37f31a85e83720c2">m_masterTimer</a></td></tr>
<tr class="separator:a53a66ed61d8441dd37f31a85e83720c2 inherit pro_attribs_classTaskBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Base functionality for interfacing with the hardware of all devices which LunaSysMgr can run on</p>
<p>Provides information and capabilities such as:</p>
<ul>
<li>Screen size and other display information.</li>
<li>Hardware keypress (dot, shift, and symbol keys) to system keypress translation (handled here since it could be different for different keyboards).</li>
<li>Taking screenshots.</li>
<li>Turning on and off diffferent device sensors.</li>
<li>Bluetooth keyboard handling. </li>
</ul>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="abc1bcd5c42d2eb5451a8170379cae304"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">HostBase::~HostBase </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Clean up device-specific resources</p>
<p>Closes down any hardware initialized when this host was constructed. Designed to be overridden by each Host class for each type of device so that all hardware of specific devices is correctly shut down.</p>
<p>Just runs <a class="el" href="classHostBase.htm#a6c70ea03b8347e1bf1ca3df833324379">HostBase::quit()</a> unless overridden by a derived class. </p>

</div>
</div>
<a class="anchor" id="a39006d2b759b1b297647e283ef8dfe6f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">HostBase::HostBase </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Constructor for <a class="el" href="classHostBase.htm">HostBase</a></p>
<p>Defined as protected since <a class="el" href="classHostBase.htm">HostBase</a> cannot be constructed without being derived from.</p>
<p>Initializes GLib and resets a number of the "current state" variables to default states. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="af7a97a39aca19814ec7b038bd8f93bc1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool HostBase::bluetoothKeyboardActive </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Checks whether Bluetooth keyboard functionality is enabled</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000018">Todo:</a></b></dt><dd>Verify that the documentation for this method is correct.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>true if Bluetooth keyboard functionality is enabled, otherwise false. </dd></dl>

<p>Reimplemented in <a class="el" href="classHostArm.htm#a02d4ff9b0c7877221e29f73dac60d444">HostArm</a>.</p>

</div>
</div>
<a class="anchor" id="abd2faa65456a6ee015d885edbf862818"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void HostBase::flip </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Flips the back buffer to the display</p>
<p>Displays to the screen what is currently contained in the back buffer. Since there is a back buffer, drawing can be completed on the back buffer at the program's leisure before displaying it in one swift move with a flip. </p>

<p>Reimplemented in <a class="el" href="classHostArm.htm#a4d67569de3da0b9b5d38de51ad96819d">HostArm</a>.</p>

</div>
</div>
<a class="anchor" id="a8ced00bfde3ed358720ac3c5f31d5048"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structHostInfo.htm">HostInfo</a>&amp; HostBase::getInfo </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Gets a structure of information about the current host device</p>
<p>The <a class="el" href="structHostInfo.htm">HostInfo</a> structure mostly contains information about the display device. This allows retrieval of that from a central point.</p>
<dl class="section return"><dt>Returns</dt><dd>Structure full of information about the current host device. </dd></dl>

</div>
</div>
<a class="anchor" id="a14c5ed55ae8c96d12902f27264b382b1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classInputControl.htm">InputControl</a>* HostBase::getInputControlALS </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Gets an <a class="el" href="classInputControl.htm">InputControl</a> pointer for the ambient light sensor</p>
<p>Allows the ambient light sensor to be turned on/off.</p>
<dl class="section return"><dt>Returns</dt><dd>Ambient light sensor control. </dd></dl>

<p>Reimplemented in <a class="el" href="classHostArm.htm#a5e0fbcbf0780b2f06f1210c9f131d3d8">HostArm</a>.</p>

</div>
</div>
<a class="anchor" id="aab2febe25815882de090c92f7c93076b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classInputControl.htm">InputControl</a>* HostBase::getInputControlBluetoothInputDetect </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Gets an <a class="el" href="classInputControl.htm">InputControl</a> pointer for Bluetooth input detection</p>
<p>Allows the Bluetooth input detection to be turned on/off.</p>
<dl class="section return"><dt>Returns</dt><dd>Bluetooth input sensor control. </dd></dl>

<p>Reimplemented in <a class="el" href="classHostArm.htm#a2d3055444437d6d317c5181ba82022e7">HostArm</a>.</p>

</div>
</div>
<a class="anchor" id="a462397bd3df761447abbf58d972081a9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classInputControl.htm">InputControl</a>* HostBase::getInputControlKeys </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Gets an <a class="el" href="classInputControl.htm">InputControl</a> pointer for the keyboard</p>
<p>Allows the keyboard to be turned on/off.</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000014">Todo:</a></b></dt><dd>Confirm documentation on this.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Control keys sensor control. </dd></dl>

<p>Reimplemented in <a class="el" href="classHostArm.htm#a358b89ea56aea621256391bda37d0b93">HostArm</a>.</p>

</div>
</div>
<a class="anchor" id="a1be60ebd18bf74010a6e48441feba8a8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classInputControl.htm">InputControl</a>* HostBase::getInputControlProximity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Gets an <a class="el" href="classInputControl.htm">InputControl</a> pointer for the face proximity sensor</p>
<p>Allows the face proximity sensor to be turned on/off.</p>
<dl class="section return"><dt>Returns</dt><dd>Face proximity sensor control. </dd></dl>

<p>Reimplemented in <a class="el" href="classHostArm.htm#a5e85c0d6aa734edc8d7492b0cde1c2d0">HostArm</a>.</p>

</div>
</div>
<a class="anchor" id="a50b0466b4bd8a8948532f085b229da96"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classInputControl.htm">InputControl</a>* HostBase::getInputControlTouchpanel </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Gets an <a class="el" href="classInputControl.htm">InputControl</a> pointer for the touch panel</p>
<p>Allows the touch panel to be turned on/off.</p>
<dl class="section return"><dt>Returns</dt><dd>Touch panel sensor control. </dd></dl>

<p>Reimplemented in <a class="el" href="classHostArm.htm#aeec700787178cd33745ad94584007343">HostArm</a>.</p>

</div>
</div>
<a class="anchor" id="a4e1396c230ce0aadec60a742259c1d36"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classLedControl.htm">LedControl</a>* HostBase::getLedControlKeypadAndDisplay </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Gets an <a class="el" href="classLedControl.htm">LedControl</a> pointer for the keyboard backlight</p>
<p>Allows the keyboard backlight to be turned on/off.</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000015">Todo:</a></b></dt><dd>Confirm documentation on this.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Keyboard backlight control. </dd></dl>

<p>Reimplemented in <a class="el" href="classHostArm.htm#ac97a3815e42cfdec5b838af3658b2ec2">HostArm</a>.</p>

</div>
</div>
<a class="anchor" id="a0d1c61d48230e0fcb4705ccddb886d3d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int HostBase::getNumberOfSwitches </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Gets the number of hardware switches the current host device has</p>
<p>As an example, the Palm Pre has 3 switches:</p>
<ul>
<li>Ringer on/off.</li>
<li>Slider opened/closed.</li>
<li>Headphones inserted/no headphones.</li>
</ul>
<dl class="section return"><dt>Returns</dt><dd>Number of hardware switches the device has. </dd></dl>

<p>Reimplemented in <a class="el" href="classHostArm.htm#a5984e1ef2b8f4a3ecd63bc8937bf1572">HostArm</a>, <a class="el" href="classHostArmQemu.htm#a4147da831fa24dbc0cf2730c367db60e">HostArmQemu</a>, <a class="el" href="classHostArmBroadway.htm#adbb41aeb1e25edd433a95690be58fe0b">HostArmBroadway</a>, <a class="el" href="classHostArmTopaz.htm#a37cb9374644f448afaf3084535fefc31">HostArmTopaz</a>, <a class="el" href="classHostArmOpal.htm#af8ae8e8c88973ff67f95961e27efc73b">HostArmOpal</a>, and <a class="el" href="classHostArmWindsorNot.htm#acf1183f42b5ecf61d057ec615ebebf2b">HostArmWindsorNot</a>.</p>

</div>
</div>
<a class="anchor" id="a306567c56c8b87c98d440e151a6c1275"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void HostBase::handleEvent </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsptr.htm">sptr</a>&lt; <a class="el" href="classEvent.htm">Event</a> &gt;&#160;</td>
          <td class="paramname"><em>event</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p><a class="el" href="classEvent.htm">Event</a> handler</p>
<p>Called by the event loop to handle each event, in order, from the event queue</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classsptr.htm">sptr</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">event</td><td>Smart pointer to an <a class="el" href="classEvent.htm">Event</a> with info about the event to handle </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classTaskBase.htm#aa163c038df09ab66da2b5003b9101731">TaskBase</a>.</p>

</div>
</div>
<a class="anchor" id="a5835840c718876c380bfa12e1e85e329"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* HostBase::hardwareName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Return the specific name (including model revision) of the current host device</p>
<p>As an example, for a generic ARM device for which more information is not available, it returns "ARM Device". For a Palm Pixie device, it might return something like "Pixie DVT1".</p>
<dl class="section return"><dt>Returns</dt><dd>Name of the hardware of the current host device. </dd></dl>

<p>Implemented in <a class="el" href="classHostArm.htm#ab9b1444ba6e156f9dca62ab38ee024e2">HostArm</a>, <a class="el" href="classHostArmQemu.htm#aa983f9982d0d8cf9a40be9bc90d246e9">HostArmQemu</a>, <a class="el" href="classHostArmBroadway.htm#ab2544381e3c840e806e3932ef9cb6eac">HostArmBroadway</a>, <a class="el" href="classHostArmMantaray.htm#a2312077da3740485e6467ce6b2114891">HostArmMantaray</a>, <a class="el" href="classHostArmTopaz.htm#a265772fbd96bef0dade5075e01ff4ec6">HostArmTopaz</a>, <a class="el" href="classHostArmOpal.htm#a2f73a7ee911f17cadf291f57d5f20a75">HostArmOpal</a>, <a class="el" href="classHostArmWindsorNot.htm#aa4282a565fc51472cd11f15c7600e884">HostArmWindsorNot</a>, <a class="el" href="classHostArmUnknown.htm#aa1b4dff301656bdf4c0ef334b861c0c4">HostArmUnknown</a>, and <a class="el" href="classHostQtDesktop.htm#af03f51250dfee433ba8e99e253575df3">HostQtDesktop</a>.</p>

</div>
</div>
<a class="anchor" id="aafe87f833c0d66f493894845a11eb36a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HostBase::hasAltKey </td>
          <td>(</td>
          <td class="paramtype">Qt::KeyboardModifiers&#160;</td>
          <td class="paramname"><em>modifiers</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Maps Qt's version of the state of the modifier keys to whether or not the Alt (dot) key is pressed</p>
<p>On <a class="el" href="classHostQtDesktop.htm">HostQtDesktop</a>, both the Ctrl and Alt keys are mapped to the LunaSysMgr version of the Alt (dot) key.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">modifiers</td><td>Keybaord modifiers, as reported by Qt </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Whether or not the current state of the hardware modifier keys indicates that the Alt (dot) key is pressed. </dd></dl>

<p>Reimplemented in <a class="el" href="classHostQtDesktop.htm#a16558bcf2220e536dc16056010ccc8b4">HostQtDesktop</a>.</p>

</div>
</div>
<a class="anchor" id="aad38805fb652479658b5831ef2a85926"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool HostBase::homeButtonWakesUpScreen </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Presumably whether the Home button wakes up the screen</p>
<p>This is seldom used and largely undocumented. Description is more or less a guess.</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000016">Todo:</a></b></dt><dd>Determine with certainty what this method is for.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Presumably true if pressing the Home button wakes up the screen and false otherwise. </dd></dl>

<p>Reimplemented in <a class="el" href="classHostArmTopaz.htm#a38a6f5dbf4bfbe4fd640edd0bd96ae26">HostArmTopaz</a>, <a class="el" href="classHostArmOpal.htm#a33f97bbfbaea5dc49d654a13a5e70925">HostArmOpal</a>, and <a class="el" href="classHostArmWindsorNot.htm#ac0cad915a7495076173c317a6d0b816f">HostArmWindsorNot</a>.</p>

</div>
</div>
<a class="anchor" id="ac6ef80b32e862db109167ef6d436e170"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HostBase::hostIsQemu </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Gets whether or not the current host is running under a Qemu virtual machine</p>
<dl class="section return"><dt>Returns</dt><dd>true if running under a Qemu virtual machine, otherwise false. </dd></dl>

</div>
</div>
<a class="anchor" id="a0ada2c44250d792df0a01b69b4b2e0e1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void HostBase::init </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>h</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Initialize device-specific hardware</p>
<p>Initializes hardware, fetches display info, and generally prepares the host device for LunaSysMgr to run on it.</p>
<p>Must be overridden for each type of device Host class needed.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">w</td><td>Hint as to what the screen width probably is. Ignored by most devices since they can query the screen for its capabilities. </td></tr>
    <tr><td class="paramname">h</td><td>Hint as to what the screen height probably is. Ignored by most devices since they can query the screen for its capabilities. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classHostArm.htm#afdb1270ae2387bc9240f2c70544025ef">HostArm</a>, and <a class="el" href="classHostQtDesktop.htm#a2aa786a517cd76338f42f799f70489b9">HostQtDesktop</a>.</p>

</div>
</div>
<a class="anchor" id="ac0615bded33adf0ad86fda0f27b040c2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classHostBase.htm">HostBase</a> * HostBase::instance </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Gets a pointer to an instance of the current device-specific Host class</p>
<p>Since each host device will have different capabilities, this method allows you to retrieve the correct host information for the current device. </p>

</div>
</div>
<a class="anchor" id="ac7aac96a702507f19f24f0a9e3195700"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void HostBase::lockPainting </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Locks the display's back buffer to draw to</p>
<p>If the display is currently being used by another thread, this method waits until the other method is done and exclusive access is granted before returning. </p>

</div>
</div>
<a class="anchor" id="a20cf499b6e9597d72c33c9ad731f3732"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">QPoint HostBase::map </td>
          <td>(</td>
          <td class="paramtype">const QPoint &amp;&#160;</td>
          <td class="paramname"><em>pt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Map a screen touch sensor point to a point on the display screen taking into account device orientation</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pt</td><td>Touchscreen point coordinates. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Translated display window coordinates translated using the same orientation rotation as the objects on-screen. </dd></dl>

</div>
</div>
<a class="anchor" id="a95919e14b25a77f1d70b688855fbeb48"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool HostBase::metaModifier </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Gets whether or not the meta key is currently pressed</p>
<dl class="section return"><dt>Returns</dt><dd>true if the meta key is currently pressed, otherwise false. </dd></dl>

</div>
</div>
<a class="anchor" id="a242c246df15f73a588a5027cf46cb580"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void HostBase::OrientationSensorOn </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Function enables/disables the orientation sensor</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">enable</td><td>true to enable the orientation sensor, false to disable it. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="classHostArm.htm#a58a0850f8fa5a17e1288527458e4b68f">HostArm</a>.</p>

</div>
</div>
<a class="anchor" id="ae80e32785170b3f3e4268fc22b727b86"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOrientationEvent.htm">OrientationEvent</a>* HostBase::postProcessDeviceOrientation </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOrientationEvent.htm">OrientationEvent</a> *&#160;</td>
          <td class="paramname"><em>currOrientation</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Function processes the Orientation of the device and returns the correct screen(display) orientation.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">currOrientation</td><td>- Current device orientation</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns the correct device specific orientation to be used for device screen orientation</dd></dl>
<dl class="section note"><dt>Note</dt><dd>ownership of the returned object is transferred back to the caller. </dd></dl>

<p>Reimplemented in <a class="el" href="classHostArmTopaz.htm#a61e5d5e1193a9afa2b0a7c487af15f39">HostArmTopaz</a>.</p>

</div>
</div>
<a class="anchor" id="a6c70ea03b8347e1bf1ca3df833324379"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void HostBase::quit </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Terminates this task</p>
<p>At this point, it doesn't appear this is used by any deriving classes. Ideally this would do cleanup from <a class="el" href="classTaskBase.htm#a6201a468cbd0510f5d23372145e26bf1">TaskBase::run()</a>. </p>

<p>Implements <a class="el" href="classTaskBase.htm#a5b456149fb5490c2d3bad9b98f270123">TaskBase</a>.</p>

</div>
</div>
<a class="anchor" id="a12aff8262b4bf30d3cb6e0af32909011"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void HostBase::run </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Runs this task</p>
<p>The bulk of derived classes' funcionality should reside within this method. This method should not return until the task is complete. For example, WebAppManager runs a QCoreApplication within this method, and when it terminates, this function returns. </p>

<p>Implements <a class="el" href="classTaskBase.htm#a6201a468cbd0510f5d23372145e26bf1">TaskBase</a>.</p>

</div>
</div>
<a class="anchor" id="a8e75d775b407727518e9d202747e4ce6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void HostBase::setAppDirectRenderingLayerEnabled </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Unknown purpose at this time</p>
<p>This is used in very few other places, so I don't know exactly what it's used for. On ARM devices, executes an FBIO command that I cannot currently find documentation for. Seems to have something to do with blanking.</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000013">Todo:</a></b></dt><dd>Document what this is used for and how it works once it's figured out.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">enable</td><td>Unknown. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="classHostArm.htm#aed6d8442ac3da98984a4ca00ad630b30">HostArm</a>.</p>

</div>
</div>
<a class="anchor" id="a90abfa30f83b6f66ac435a3baa4dcce4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void HostBase::setBluetoothKeyboardActive </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>active</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Enable/disable Bluetooth keyboards</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000017">Todo:</a></b></dt><dd>Verify that the documentation for this method is correct.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">active</td><td>true to enable Bluetooth keyboards, false to disable </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="classHostArm.htm#aa797feaf368a0613258678274c452f03">HostArm</a>.</p>

</div>
</div>
<a class="anchor" id="a34c4fd34fe3322859382f3bc11443758"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void HostBase::setCentralWidget </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classQWidget.htm">QWidget</a> *&#160;</td>
          <td class="paramname"><em>view</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Sets the Qt widget that the display should reside in</p>
<p>Mostly unused except under the QtDesktop and Qemu hosts, where it is used to attach a keyboard remapping filter.</p>
<p>Called by <a class="el" href="">WindowServer::WindowServer()</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">view</td><td>Qt widget to display within. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="classHostArm.htm#a7d819c415ef5113bb13cb809736f16af">HostArm</a>, <a class="el" href="classHostArmQemu.htm#a48d951202fb92cc1394bfac684037c5d">HostArmQemu</a>, and <a class="el" href="classHostQtDesktop.htm#a3f2abc0ef29b1f85f6ddd51173bcb707">HostQtDesktop</a>.</p>

</div>
</div>
<a class="anchor" id="a3899b37381505a5e346d15235b11d31c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void HostBase::setMetaModifier </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>metaKeyDown</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Sets whether or not the meta key is currently pressed</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">metaKeyDown</td><td>true if the meta key is currently pressed, otherwise false. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a32006e1c0cea07b0b2b93075a71b1eb8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void HostBase::setOrientation </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOrientationEvent.htm#a971894297d09205ac67571c3957f560a">OrientationEvent::Orientation</a>&#160;</td>
          <td class="paramname"><em>o</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets the device's current orientation</p>
<p>Changes the display's transformation matrix so on-screen items display with the correct orientation.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">o</td><td>One of <a class="el" href="classOrientationEvent.htm#a971894297d09205ac67571c3957f560aabd3c87a2f756ec0e456a75b547f77ad8">OrientationEvent::Orientation_Up</a>, <a class="el" href="classOrientationEvent.htm#a971894297d09205ac67571c3957f560aa33eb4af862773edb7b6efaa191ac6635">OrientationEvent::Orientation_Down</a>, <a class="el" href="classOrientationEvent.htm#a971894297d09205ac67571c3957f560aaa02950dda1d6c1a5ac5cc1ebff724316">OrientationEvent::Orientation_Right</a>, <a class="el" href="classOrientationEvent.htm#a971894297d09205ac67571c3957f560aab61f9e6f0f257b49e7974bf1bb7a847e">OrientationEvent::Orientation_Left</a> indicating which edge of the screen is vertically "up". </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5ac0c673700f4ef06d46ec7cbf85239d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void HostBase::setRenderingLayerEnabled </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Unknown purpose at this time</p>
<p>Almost the same as <a class="el" href="classHostBase.htm#a8e75d775b407727518e9d202747e4ce6">HostBase::setAppDirectRenderingLayerEnabled</a>, but on a different fb device. Has something to do with blanking, but still don't really understand what this is used for.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">enable</td><td>Unknown. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="classHostArm.htm#ac330087c411b5fbfcbce685b8e1ef73d">HostArm</a>.</p>

</div>
</div>
<a class="anchor" id="aefce63a753901dc2be5aaad540fc8f25"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void HostBase::show </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Grab access to the hardware (including the display and input devices) for use by LunaSysMgr</p>
<p>Run this when you're ready to start using the host to display things. It grabs exclusive access to the screen and input devices (on most devices) so it can actually start displaying graphics on the screen.</p>
<p>Must be overridden per-device since it's fairly device-specific what needs to be enabled to be able to run LunaSysMgr. </p>

<p>Reimplemented in <a class="el" href="classHostArm.htm#affcce2079c29465a3f80593711d68951">HostArm</a>, and <a class="el" href="classHostQtDesktop.htm#ac53a866f1c0425f8e13b4f48fe0b27a1">HostQtDesktop</a>.</p>

</div>
</div>
<a class="anchor" id="a0909a8a75b8df50b2115d06a5ab559d9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void HostBase::signalBluetoothKeyboardActive </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>active</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">signal</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Unknown at this time</p>
<p>Do not currently know how this works or where it is defined.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">active</td><td>Unknown. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a77b77c3bf9d7a51d43e8109012046229"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual QImage HostBase::takeAppDirectRenderingScreenShot </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Takes a screenshot, including anything rendered directly to the display by an app</p>
<p>Currently only implemented on ARM devices, and on them is the same as a regular screenshot.</p>
<dl class="section return"><dt>Returns</dt><dd>An image showing the current state of the display, even if an app has drawn to it directly. </dd></dl>

<p>Reimplemented in <a class="el" href="classHostArm.htm#a574fc9862e334e9cced003a502330ec5">HostArm</a>.</p>

</div>
</div>
<a class="anchor" id="a4eb89f53ab0a1f0295deeec6ef1e86d4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual QImage HostBase::takeScreenShot </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Takes a screenshot</p>
<p>Currently only implemented on ARM devices.</p>
<dl class="section return"><dt>Returns</dt><dd>An image showing the current state of the display. </dd></dl>

<p>Reimplemented in <a class="el" href="classHostArm.htm#acdb52922ba3ec6d1885c47dc00693e56">HostArm</a>.</p>

</div>
</div>
<a class="anchor" id="a1d837481808ec34d2a832d5af182c897"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short HostBase::translateKeyWithMeta </td>
          <td>(</td>
          <td class="paramtype">unsigned short&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>withShift</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>withAlt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Translate a hardware keycode to a system keycode depending on modifier keys</p>
<p>Takes a hardware keycode and which modifiers are currently pressed and returns a system modifier. For example, if the key is the key code for "a" and shift is down, it translates it to the key code for "A".</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>Input hardware key code. </td></tr>
    <tr><td class="paramname">withShift</td><td>Whether Shift is currently pressed. </td></tr>
    <tr><td class="paramname">withAlt</td><td>Whether Alt (dot key) is currently pressed. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Translated key code. </dd></dl>

<p>Reimplemented in <a class="el" href="classHostQtDesktop.htm#a499c245d0ebd092f644cd3d98bb24fe3">HostQtDesktop</a>.</p>

</div>
</div>
<a class="anchor" id="a83e9d336db1554aed7e787bd0d0cada2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void HostBase::turboMode </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Enables/disables turbo mode</p>
<p>Changes CPU frequency scaling. When turbo mode is enabled, the CPU is set to run at full speed. When disabled, it turns the speed down to save on power usage.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">enable</td><td>true to enable turbo mode, false to disable it </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="classHostArmTopaz.htm#a59055ab85a924b187c928a5b616a285b">HostArmTopaz</a>, and <a class="el" href="classHostArmOpal.htm#ac39736402f4723e5e3aea5678617fb35">HostArmOpal</a>.</p>

</div>
</div>
<a class="anchor" id="ae46ba603ab5ae5b38a66bb95f06708a2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void HostBase::turboModeSubscription </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>add</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Enables/disables subscribing to turbo mode</p>
<p>Counts the number of times callers turn on turbo mode and turns it on as long as anyone needs it.</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000012">Todo:</a></b></dt><dd>Figure out why it's exposed like this instead of having <a class="el" href="classHostBase.htm#a83e9d336db1554aed7e787bd0d0cada2">HostBase::turboMode()</a> exposed directly.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">add</td><td>true to ask that turbo mode be turned on, false to tell <a class="el" href="classHostBase.htm">HostBase</a> that it's no longer needed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a64e347099fa6beeaeafd1c180a124d44"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void HostBase::unlockPainting </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Unlocks the display's back buffer so other threads can draw to it </p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="ab13670cd01fe840cffa477b36234cdd3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structHostInfo.htm">HostInfo</a> HostBase::m_info</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Host device info generated in <a class="el" href="classHostBase.htm#a0ada2c44250d792df0a01b69b4b2e0e1">HostBase::init()</a> and cached here so it can be retrieved quickly </p>

</div>
</div>
<a class="anchor" id="a6b7d33ca0cd0606f5bc5676ce024a3d5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HostBase::m_metaKeyDown</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Whether or not the Meta key is currently pressed </p>

</div>
</div>
<a class="anchor" id="a22536f7dce86ddf9d5320beb18edf6fc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int HostBase::m_numBuffers</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Presumably the number of back buffers</p>
<p>Currently appears to be unused.</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000019">Todo:</a></b></dt><dd><p class="startdd">Confirm documentation of this member variable. </p>
<p class="enddd">Remove this if possible. </p>
</dd></dl>

</div>
</div>
<a class="anchor" id="adb9d5c1dbab87500dc8635b0736b2726"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOrientationEvent.htm#a971894297d09205ac67571c3957f560a">OrientationEvent::Orientation</a> HostBase::m_orientation</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Current orientation of device</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classHostBase.htm#a32006e1c0cea07b0b2b93075a71b1eb8">HostBase::setOrientation()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a5faac341cd6686188e124e9300d493a5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMutex.htm">Mutex</a> HostBase::m_paintMutex</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p><a class="el" href="classMutex.htm">Mutex</a> that allows locking of the back buffer while a function paints to it </p>

</div>
</div>
<a class="anchor" id="a062a39ed237dc2304c458a817328ad5c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">QTransform HostBase::m_trans</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Current transformation matrix used to rotate the display to match the current device orientation (so the screen image always faces "up") </p>

</div>
</div>
<a class="anchor" id="ae213d89f606c81074305f0a40ee4da38"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned HostBase::m_turboModeSubscriptions</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Number of running pieces of code which currently need turbo mode enabled</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classHostBase.htm#ae46ba603ab5ae5b38a66bb95f06708a2">HostBase::turboModeSubscription()</a> </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="HostBase_8h_source.htm">HostBase.h</a></li>
<li><a class="el" href="HostBase_8cpp.htm">HostBase.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="classHostBase.htm">HostBase</a></li>
    <li class="footer">Generated on Fri Jun 21 2013 00:48:48 for luna-sysmgr-common by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
