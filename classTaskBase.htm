<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>luna-sysmgr-common: TaskBase Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">luna-sysmgr-common
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classTaskBase.htm','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classTaskBase-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">TaskBase Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="TaskBase_8h_source.htm">TaskBase.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for TaskBase:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classTaskBase__inherit__graph.svg" width="744" height="360"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.htm">legend</a>]</span></center></div>
<div class="dynheader">
Collaboration diagram for TaskBase:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classTaskBase__coll__graph.svg" width="614" height="367"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad1abe361d54207f1bb4e0e2f87e8251c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#ad1abe361d54207f1bb4e0e2f87e8251c">TaskBase</a> ()</td></tr>
<tr class="separator:ad1abe361d54207f1bb4e0e2f87e8251c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a1aa8cdd317717be35592265762faa1"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a7a1aa8cdd317717be35592265762faa1">~TaskBase</a> ()</td></tr>
<tr class="separator:a7a1aa8cdd317717be35592265762faa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6201a468cbd0510f5d23372145e26bf1"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a6201a468cbd0510f5d23372145e26bf1">run</a> ()=0</td></tr>
<tr class="separator:a6201a468cbd0510f5d23372145e26bf1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b456149fb5490c2d3bad9b98f270123"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a5b456149fb5490c2d3bad9b98f270123">quit</a> ()=0</td></tr>
<tr class="separator:a5b456149fb5490c2d3bad9b98f270123"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87d3ceb4097dfd5969ebf4405b3dd118"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a87d3ceb4097dfd5969ebf4405b3dd118">postEvent</a> (<a class="el" href="classsptr.htm">sptr</a>&lt; <a class="el" href="classEvent.htm">Event</a> &gt; event, bool highPriority=false)</td></tr>
<tr class="separator:a87d3ceb4097dfd5969ebf4405b3dd118"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96aff6fff43b856e985a6b6ced6d5af9"><td class="memItemLeft" align="right" valign="top">GMainLoop *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a96aff6fff43b856e985a6b6ced6d5af9">mainLoop</a> () const </td></tr>
<tr class="separator:a96aff6fff43b856e985a6b6ced6d5af9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d02fef1170fa299c2be8c7a89d992ee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classSingletonTimer.htm">SingletonTimer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a6d02fef1170fa299c2be8c7a89d992ee">masterTimer</a> () const </td></tr>
<tr class="separator:a6d02fef1170fa299c2be8c7a89d992ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classRefCounted"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classRefCounted')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classRefCounted.htm">RefCounted</a></td></tr>
<tr class="memitem:a0f4d8212944ba431ea79c4fc55f093f8 inherit pub_methods_classRefCounted"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRefCounted.htm#a0f4d8212944ba431ea79c4fc55f093f8">RefCounted</a> ()</td></tr>
<tr class="separator:a0f4d8212944ba431ea79c4fc55f093f8 inherit pub_methods_classRefCounted"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e65f84e3e6cc1c2c633b97a19d49246 inherit pub_methods_classRefCounted"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRefCounted.htm#a5e65f84e3e6cc1c2c633b97a19d49246">~RefCounted</a> ()</td></tr>
<tr class="separator:a5e65f84e3e6cc1c2c633b97a19d49246 inherit pub_methods_classRefCounted"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1932b96104186ea7423d53648e2272b1 inherit pub_methods_classRefCounted"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRefCounted.htm#a1932b96104186ea7423d53648e2272b1">ref</a> ()</td></tr>
<tr class="separator:a1932b96104186ea7423d53648e2272b1 inherit pub_methods_classRefCounted"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdf76a72ff2ba5f755c4d954c0680480 inherit pub_methods_classRefCounted"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRefCounted.htm#afdf76a72ff2ba5f755c4d954c0680480">deref</a> ()</td></tr>
<tr class="separator:afdf76a72ff2ba5f755c4d954c0680480 inherit pub_methods_classRefCounted"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:aa163c038df09ab66da2b5003b9101731"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#aa163c038df09ab66da2b5003b9101731">handleEvent</a> (<a class="el" href="classsptr.htm">sptr</a>&lt; <a class="el" href="classEvent.htm">Event</a> &gt; event)=0</td></tr>
<tr class="separator:aa163c038df09ab66da2b5003b9101731"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a55151f8de8aec43e48186633453ed86d"><td class="memItemLeft" align="right" valign="top">GMainContext *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a55151f8de8aec43e48186633453ed86d">m_mainCtxt</a></td></tr>
<tr class="separator:a55151f8de8aec43e48186633453ed86d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34b5b86cb2d9c794ba9e3c0708840549"><td class="memItemLeft" align="right" valign="top">GMainLoop *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a34b5b86cb2d9c794ba9e3c0708840549">m_mainLoop</a></td></tr>
<tr class="separator:a34b5b86cb2d9c794ba9e3c0708840549"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4b112c73aece7683b4e23316e672a7e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMutex.htm">Mutex</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#ae4b112c73aece7683b4e23316e672a7e">m_mutex</a></td></tr>
<tr class="separator:ae4b112c73aece7683b4e23316e672a7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2559a82f77d3dfb1171234db3ed6f205"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMutex.htm">Mutex</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a2559a82f77d3dfb1171234db3ed6f205">m_eventsMutex</a></td></tr>
<tr class="separator:a2559a82f77d3dfb1171234db3ed6f205"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77871e74bfdb9d86e609aa7d0f2fa1ab"><td class="memItemLeft" align="right" valign="top">std::list&lt; <a class="el" href="classsptr.htm">sptr</a>&lt; <a class="el" href="classEvent.htm">Event</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a77871e74bfdb9d86e609aa7d0f2fa1ab">m_eventsList</a></td></tr>
<tr class="separator:a77871e74bfdb9d86e609aa7d0f2fa1ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29a486e0ac57b8b9dfbf2ff5b1fffc27"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classAsyncCaller.htm">AsyncCaller</a>&lt; <a class="el" href="classTaskBase.htm">TaskBase</a> &gt; *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a29a486e0ac57b8b9dfbf2ff5b1fffc27">m_asyncCaller</a></td></tr>
<tr class="separator:a29a486e0ac57b8b9dfbf2ff5b1fffc27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53a66ed61d8441dd37f31a85e83720c2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classSingletonTimer.htm">SingletonTimer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTaskBase.htm#a53a66ed61d8441dd37f31a85e83720c2">m_masterTimer</a></td></tr>
<tr class="separator:a53a66ed61d8441dd37f31a85e83720c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Abstract base class for runnable tasks</p>
<p>Manages an event queue and feeds each event (in order) to an event handler method to be defined by derived classes.</p>
<p>This class cannot be instantiated by itself but must be derived from. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ad1abe361d54207f1bb4e0e2f87e8251c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">TaskBase::TaskBase </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Constructs a new <a class="el" href="classTaskBase.htm">TaskBase</a></p>
<p>Since this class is designed to be built upon, it mainly just sets the internal members to null. </p>

</div>
</div>
<a class="anchor" id="a7a1aa8cdd317717be35592265762faa1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">TaskBase::~TaskBase </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Cleans up the current <a class="el" href="classTaskBase.htm">TaskBase</a> instance</p>
<p>Since this class is designed to be built upon, this is here to define it as virtual so <a class="el" href="classTaskBase.htm">TaskBase</a> pointers can correctly call their derived class's destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="aa163c038df09ab66da2b5003b9101731"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void TaskBase::handleEvent </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsptr.htm">sptr</a>&lt; <a class="el" href="classEvent.htm">Event</a> &gt;&#160;</td>
          <td class="paramname"><em>event</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p><a class="el" href="classEvent.htm">Event</a> handler</p>
<p>Called by the event loop to handle each event, in order, from the event queue</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classsptr.htm">sptr</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">event</td><td>Smart pointer to an <a class="el" href="classEvent.htm">Event</a> with info about the event to handle </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classHostBase.htm#a306567c56c8b87c98d440e151a6c1275">HostBase</a>.</p>

</div>
</div>
<a class="anchor" id="a96aff6fff43b856e985a6b6ced6d5af9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">GMainLoop* TaskBase::mainLoop </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Gets a pointer to this task's GLib main event loop</p>
<p>Main GLib functions require a pointer to the main GLib event loop, which (from what I can tell) is specific to each process or fork. This allows access to it, thereby allowing central storage of the main event loop pointer without having to use a global variable.</p>
<dl class="section return"><dt>Returns</dt><dd>Pointer to GLib main event loop </dd></dl>

</div>
</div>
<a class="anchor" id="a6d02fef1170fa299c2be8c7a89d992ee"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classSingletonTimer.htm">SingletonTimer</a>* TaskBase::masterTimer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Gets a pointer to the master timer for this task</p>
<p>The master timer is a class which simplified access to the system clock. It is specific to a GLib main event loop, so it is returned here so construction of it can be abstracted away from the caller, removing a few explicit GLib dependencies.</p>
<p>Note: This pointer is set to 0 by default by <a class="el" href="classTaskBase.htm#ad1abe361d54207f1bb4e0e2f87e8251c">TaskBase::TaskBase()</a> and cannot be used until a derived class sets it up.</p>
<dl class="section return"><dt>Returns</dt><dd>Pointer to the master timer for this task </dd></dl>

</div>
</div>
<a class="anchor" id="a87d3ceb4097dfd5969ebf4405b3dd118"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void TaskBase::postEvent </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsptr.htm">sptr</a>&lt; <a class="el" href="classEvent.htm">Event</a> &gt;&#160;</td>
          <td class="paramname"><em>event</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>highPriority</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Posts an event to this task's event queue</p>
<p>Normally events in the queue are fed to the derived class's event handler in order from first to last. This method is how you add add events to the queue. If highPriority is set to true, the new event is added to the beginning of the queue so it is processed as soon as possible. Normally you would post events with highPriority set to false so they're posted to the end of the queue and processed in the order received.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classsptr.htm">sptr</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">event</td><td>Smart pointer to an <a class="el" href="classEvent.htm">Event</a> object to post </td></tr>
    <tr><td class="paramname">highPriority</td><td>Whether or not this event is urgent and should be posted to the start of the queue </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5b456149fb5490c2d3bad9b98f270123"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void TaskBase::quit </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Terminates this task</p>
<p>At this point, it doesn't appear this is used by any deriving classes. Ideally this would do cleanup from <a class="el" href="classTaskBase.htm#a6201a468cbd0510f5d23372145e26bf1">TaskBase::run()</a>. </p>

<p>Implemented in <a class="el" href="classHostBase.htm#a6c70ea03b8347e1bf1ca3df833324379">HostBase</a>, and <a class="el" href="classSyncTask.htm#ad91e90efda99e5be8a0a12a0843b8df1">SyncTask</a>.</p>

</div>
</div>
<a class="anchor" id="a6201a468cbd0510f5d23372145e26bf1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void TaskBase::run </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Runs this task</p>
<p>The bulk of derived classes' funcionality should reside within this method. This method should not return until the task is complete. For example, WebAppManager runs a QCoreApplication within this method, and when it terminates, this function returns. </p>

<p>Implemented in <a class="el" href="classHostBase.htm#a12aff8262b4bf30d3cb6e0af32909011">HostBase</a>, and <a class="el" href="classSyncTask.htm#a98f59db0f166b573d7822ca61462cfeb">SyncTask</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a29a486e0ac57b8b9dfbf2ff5b1fffc27"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classAsyncCaller.htm">AsyncCaller</a>&lt;<a class="el" href="classTaskBase.htm">TaskBase</a>&gt;* TaskBase::m_asyncCaller</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Asynchronous caller to handle all events in the event queue</p>
<p>Allows the internal event handler loop callback method to be called without stalling out the caller.</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000029">Todo:</a></b></dt><dd>Check this description for accuracy once <a class="el" href="classAsyncCaller.htm">AsyncCaller</a> is documented. </dd></dl>

</div>
</div>
<a class="anchor" id="a77871e74bfdb9d86e609aa7d0f2fa1ab"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::list&lt;<a class="el" href="classsptr.htm">sptr</a>&lt;<a class="el" href="classEvent.htm">Event</a>&gt; &gt; TaskBase::m_eventsList</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p><a class="el" href="classEvent.htm">Event</a> queue</p>
<p>This standard library list object stores a list of smart pointers to events that are in the event processing queue (see <a class="el" href="classsptr.htm">sptr</a> for more information on smart pointers). Events are stored in this list in order they should be processed - first list item is the first event that the event handling loop should feed to the derived class's event handler method. </p>

</div>
</div>
<a class="anchor" id="a2559a82f77d3dfb1171234db3ed6f205"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMutex.htm">Mutex</a> TaskBase::m_eventsMutex</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p><a class="el" href="classMutex.htm">Mutex</a> for the event queue</p>
<p>Prevents other threads using the same event queue from modifying the queue while it's being actively processed. When one thread is about ready to process the queue and handle events, it will lock this mutex until it's done modifying the queue at which point it will unlock it so other threads know it's safe for them to modify it.</p>
<p>Note: <a class="el" href="classMutex.htm">Mutex</a> stands for "mutually exclusive". </p>

</div>
</div>
<a class="anchor" id="a55151f8de8aec43e48186633453ed86d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">GMainContext* TaskBase::m_mainCtxt</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Main GLib context</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000026">Todo:</a></b></dt><dd>Figure out what this points to. </dd></dl>

</div>
</div>
<a class="anchor" id="a34b5b86cb2d9c794ba9e3c0708840549"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">GMainLoop* TaskBase::m_mainLoop</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Pointer to main GLib event loop structure</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000027">Todo:</a></b></dt><dd>Commonly used throughout the code - needs to be filled in as to what it's for. </dd></dl>

</div>
</div>
<a class="anchor" id="a53a66ed61d8441dd37f31a85e83720c2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classSingletonTimer.htm">SingletonTimer</a>* TaskBase::m_masterTimer</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Master timer for this task</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000030">Todo:</a></b></dt><dd>Document this further as derived classes are documented and we figure out what this is used for. </dd></dl>

</div>
</div>
<a class="anchor" id="ae4b112c73aece7683b4e23316e672a7e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMutex.htm">Mutex</a> TaskBase::m_mutex</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p><a class="el" href="classMutex.htm">Mutex</a> for derived classes to use</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000028">Todo:</a></b></dt><dd>Fill this in after documenting some derived classes. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="TaskBase_8h_source.htm">TaskBase.h</a></li>
<li><a class="el" href="TaskBase_8cpp.htm">TaskBase.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="classTaskBase.htm">TaskBase</a></li>
    <li class="footer">Generated on Fri Jun 21 2013 00:48:48 for luna-sysmgr-common by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
